<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>追风大虾go</title>
  
  <subtitle>doublesouth&#39;s blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-01-06T08:22:46.876Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>doublesouth</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>go-micro学习笔记</title>
    <link href="http://yoursite.com/2019/01/06/go-micro%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/01/06/go-micro学习笔记/</id>
    <published>2019-01-06T08:22:00.000Z</published>
    <updated>2019-01-06T08:22:46.876Z</updated>
    
    <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#特性">特性</a></li><li><a href="#micro-toolkit">micro toolkit</a><ul><li><a href="#问题">问题</a></li></ul></li><li><a href="#如何使用">如何使用</a><ul><li><a href="#安装服务注册发现中心">安装服务注册发现中心</a></li><li><a href="#服务端">服务端</a></li><li><a href="#客户端">客户端</a></li></ul></li><li><a href="#踩过的坑">踩过的坑</a></li><li><a href="#参考文档">参考文档</a></li></ul><!-- /TOC --><a id="more"></a><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><p>服务发现</p><pre><code>自动服务注册和发现。默认使用consul作为服务发现和注册中心，可通过插件化修改为其他的注册中心，比如etcd，zookeeper等。  </code></pre><p>负载均衡</p><pre><code>基于服务发现的客户端负载平衡。</code></pre><p>消息编码</p><pre><code>基于内容类型的动态消息编码。 客户端和服务器将根据内容类型使用对应的编解码器。</code></pre><p>同步流</p><pre><code>基于RPC的请求/响应，支持双向流。提供了同步通讯的抽象。向服务发出的请求将被自动解析、负载平衡、拨号和流处理。 默认值启用tls时，transport为http / 1.1或http2。</code></pre><p>异步消息</p><pre><code>PubSub是作为异步通信和事件驱动架构的一等公民而构建的。事件通知是微服务开发的核心模式。启用tls时，默认消息传递是点对点http1.1或http2。</code></pre><p>可插拔接口</p><pre><code>Go Micro为每个分布式系统抽象出Go接口。这些接口是可插拔的，并且允许Go Micro不依赖于运行时。您可以插入任何底层技术。</code></pre><h2 id="micro-toolkit"><a href="#micro-toolkit" class="headerlink" title="micro toolkit"></a>micro toolkit</h2><p>micro是一个工具包。提供了一些工具方便在go-micro微服务架构中使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line">~ micro -h</div><div class="line">NAME:</div><div class="line">   micro - A cloud-native toolkit</div><div class="line"></div><div class="line">USAGE:</div><div class="line">   micro [global options] command [command options] [arguments...]</div><div class="line"></div><div class="line">VERSION:</div><div class="line">   0.13.0</div><div class="line"></div><div class="line">COMMANDS:</div><div class="line">    apiRun the micro API</div><div class="line">    botRun the micro bot</div><div class="line">    cliStart the interactive cli</div><div class="line">    registryQuery registry</div><div class="line">    callCall a service or function</div><div class="line">    queryDeprecated: Use call instead</div><div class="line">    streamCreate a service or function stream</div><div class="line">    publishPublish a message to a topic</div><div class="line">    healthQuery the health of a service</div><div class="line">    statsQuery the stats of a service</div><div class="line">    listList items in registry</div><div class="line">    registerRegister an item in the registry</div><div class="line">    deregisterDeregister an item in the registry</div><div class="line">    getGet item from registry</div><div class="line">    proxyRun the micro proxy</div><div class="line">    newCreate a new micro service by specifying a directory path relative to your $GOPATH</div><div class="line">    webRun the micro web app</div><div class="line"></div><div class="line">GLOBAL OPTIONS:</div><div class="line">   --client Client for go-micro; rpc [$MICRO_CLIENT]</div><div class="line">   --client_request_timeout Sets the client request timeout. e.g 500ms, 5s, 1m. Default: 5s [$MICRO_CLIENT_REQUEST_TIMEOUT]</div><div class="line">   --client_retries &quot;0&quot;Sets the client retries. Default: 1 [$MICRO_CLIENT_RETRIES]</div><div class="line">   --client_pool_size &quot;0&quot;Sets the client connection pool size. Default: 1 [$MICRO_CLIENT_POOL_SIZE]</div><div class="line">   --client_pool_ttl Sets the client connection pool ttl. e.g 500ms, 5s, 1m. Default: 1m [$MICRO_CLIENT_POOL_TTL]</div><div class="line">   --register_ttl &quot;0&quot;Register TTL in seconds [$MICRO_REGISTER_TTL]</div><div class="line">   --register_interval &quot;0&quot;Register interval in seconds [$MICRO_REGISTER_INTERVAL]</div><div class="line">   --server Server for go-micro; rpc [$MICRO_SERVER]</div><div class="line">   --server_name Name of the server. go.micro.srv.example [$MICRO_SERVER_NAME]</div><div class="line">   --server_version Version of the server. 1.1.0 [$MICRO_SERVER_VERSION]</div><div class="line">   --server_id Id of the server. Auto-generated if not specified [$MICRO_SERVER_ID]</div><div class="line">   --server_address Bind address for the server. 127.0.0.1:8080 [$MICRO_SERVER_ADDRESS]</div><div class="line">   --server_advertise Used instead of the server_address when registering with discovery. 127.0.0.1:8080 [$MICRO_SERVER_ADVERTISE]</div><div class="line">   --server_metadata [--server_metadata option --server_metadata option]A list of key-value pairs defining metadata. version=1.0.0 [$MICRO_SERVER_METADATA]</div><div class="line">   --broker Broker for pub/sub. http, nats, rabbitmq [$MICRO_BROKER]</div><div class="line">   --broker_address Comma-separated list of broker addresses [$MICRO_BROKER_ADDRESS]</div><div class="line">   --registry Registry for discovery. consul, mdns [$MICRO_REGISTRY]</div><div class="line">   --registry_address Comma-separated list of registry addresses [$MICRO_REGISTRY_ADDRESS]</div><div class="line">   --selector &quot;cache&quot;Selector used to pick nodes for querying [$MICRO_SELECTOR]</div><div class="line">   --transport Transport mechanism used; http [$MICRO_TRANSPORT]</div><div class="line">   --transport_address Comma-separated list of transport addresses [$MICRO_TRANSPORT_ADDRESS]</div><div class="line">   --enable_acmeEnables ACME support via Let&apos;s Encrypt. ACME hosts should also be specified. [$MICRO_ENABLE_ACME]</div><div class="line">   --acme_hosts Comma separated list of hostnames to manage ACME certs for [$MICRO_ACME_HOSTS]</div><div class="line">   --enable_tlsEnable TLS support. Expects cert and key file to be specified [$MICRO_ENABLE_TLS]</div><div class="line">   --tls_cert_file Path to the TLS Certificate file [$MICRO_TLS_CERT_FILE]</div><div class="line">   --tls_key_file Path to the TLS Key file [$MICRO_TLS_KEY_FILE]</div><div class="line">   --tls_client_ca_file Path to the TLS CA file to verify clients against [$MICRO_TLS_CLIENT_CA_FILE]</div><div class="line">   --api_address Set the api address e.g 0.0.0.0:8080 [$MICRO_API_ADDRESS]</div><div class="line">   --proxy_address Proxy requests via the HTTP address specified [$MICRO_PROXY_ADDRESS]</div><div class="line">   --web_address Set the web UI address e.g 0.0.0.0:8082 [$MICRO_WEB_ADDRESS]</div><div class="line">   --api_handler Specify the request handler to be used for mapping HTTP requests to services; &#123;api, proxy, rpc&#125; [$MICRO_API_HANDLER]</div><div class="line">   --api_namespace Set the namespace used by the API e.g. com.example.api [$MICRO_API_NAMESPACE]</div><div class="line">   --web_namespace Set the namespace used by the Web proxy e.g. com.example.web [$MICRO_WEB_NAMESPACE]</div><div class="line">   --api_cors Comma separated whitelist of allowed origins for CORS [$MICRO_API_CORS]</div><div class="line">   --web_cors Comma separated whitelist of allowed origins for CORS [$MICRO_WEB_CORS]</div><div class="line">   --proxy_cors Comma separated whitelist of allowed origins for CORS [$MICRO_PROXY_CORS]</div><div class="line">   --enable_statsEnable stats [$MICRO_ENABLE_STATS]</div><div class="line">   --help, -hshow help</div><div class="line">   --versionprint the version</div></pre></td></tr></table></figure><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>使用micro toolkit，<a href="https://micro.mu/docs/toolkit.html#plugins" target="_blank" rel="external">安装其他插件</a>，第一次build缺少相关包，go get 下来，build成功之后运行命令，报如下错误：</p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">panic: /debug/requests is already registered. You may have two independent copies of golang.org/x/net/trace in your binary, trying to maintain separate state. This may involve a vendored copy of golang.org/x/net/trace.</div><div class="line"></div><div class="line">goroutine 1 [running]:</div><div class="line">go.etcd.io/etcd/vendor/golang.org/x/net/trace.init.0()</div><div class="line">    /Users/doublesouth/Documents/mycode/golang/lib/src/go.etcd.io/etcd/vendor/golang.org/x/net/trace/trace.go:116 +0x16c</div></pre></td></tr></table></figure>解决方法参考该链接：https://github.com/etcd-io/etcd/issues/9357#issuecomment-377560659</code></pre><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><h3 id="安装服务注册发现中心"><a href="#安装服务注册发现中心" class="headerlink" title="安装服务注册发现中心"></a>安装服务注册发现中心</h3><p>本地使用docker安装consul：  </p><ol><li>本地安装docker</li><li>运行 <figure class="highlight docker"><figcaption><span>pull consul``` 命令从docker hub上拉取最新官方consul镜像</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="number">3</span>. 运行 ```docker <span class="keyword">run</span> -d --name=local-consul -e CONSUL_BIND_INTERFACE=eth0 -p 8500:8500 consul``` 命令启动docker容器，需要暴露8500端口，否则本地服务无法注册到consul  </div><div class="line"></div><div class="line"><span class="comment">### 服务端</span></div><div class="line"></div><div class="line">server</div><div class="line"></div><div class="line">```golang</div><div class="line">type HelloWorld struct &#123;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line">// 实现hello_world service中的Hello方法</div><div class="line">func (g *HelloWorld) Hello(ctx context.Context, req *hello_world.HelloRequest, rsp *hello_world.HelloResponse) error &#123;</div><div class="line">    rsp.Greeting = <span class="string">"Hello World: "</span> + req.Name</div><div class="line">    return nil</div><div class="line">&#125;</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">    service := micro.NewService(</div><div class="line">        micro.Name(<span class="string">"hello_world"</span>),</div><div class="line">        micro.Version(<span class="string">"latest"</span>),</div><div class="line">        micro.Metadata(map[string]string&#123;</div><div class="line">            <span class="string">"type"</span>: <span class="string">"helloworld"</span>,</div><div class="line">        &#125;),</div><div class="line">    )</div><div class="line"></div><div class="line">    service.Init()</div><div class="line"></div><div class="line">    hello_world.RegisterHelloWorldHandler(service.Server(), new(HelloWorld))</div><div class="line"></div><div class="line">    if err := service.Run(); err != nil &#123;</div><div class="line">        fmt.Println(err)   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p>client  </p><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    service := micro.NewService(</div><div class="line">        micro.Name(<span class="string">"hello_world"</span>),</div><div class="line">        micro.Version(<span class="string">"latest"</span>),</div><div class="line">        micro.Metadata(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;</div><div class="line">            <span class="string">"type"</span>: <span class="string">"helloworld"</span>,</div><div class="line">        &#125;),</div><div class="line">    )</div><div class="line"></div><div class="line">    service.Init()</div><div class="line"></div><div class="line">    greeter := hello_world.NewHelloWorldClient(<span class="string">"hello_world"</span>, service.Client())</div><div class="line"></div><div class="line">    rsp, err := greeter.Hello(context.TODO(), &amp;hello_world.HelloRequest&#123;Name: <span class="string">"Alice"</span>&#125;)</div><div class="line"></div><div class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">        fmt.Println(err)</div><div class="line">        <span class="keyword">return</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    fmt.Println(rsp.Greeting)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="踩过的坑"><a href="#踩过的坑" class="headerlink" title="踩过的坑"></a>踩过的坑</h2><ol><li><p>go-micro框架客户端连接池大小配置不是只建这么多的连接，源码中的处理机制是每次发起客户端请求首先检查池中有没有连接，如果没有连接会直接新建一个连接发起请求，连接用完释放连接的时候会检查池中的连接数是达到配置的连接数，如果达到配置的连接数直接关闭该连接，如果未达到才将该连接放到池中。这就会导致一个问题，如果请求量过大会导致连接一直在创建，最终会报 too many open files 错误。</p><p> 下面是go-micro框架中client端获取连接和释放连接的源码：</p> <figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取连接</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *pool)</span> <span class="title">getConn</span><span class="params">(addr <span class="keyword">string</span>, tr transport.Transport, opts ...transport.DialOption)</span> <span class="params">(*poolConn, error)</span></span> &#123;</div><div class="line">    p.Lock()</div><div class="line">    conns := p.conns[addr]</div><div class="line">    now := time.Now().Unix()</div><div class="line"></div><div class="line">    <span class="comment">// while we have conns check age and then return one</span></div><div class="line">    <span class="comment">// otherwise we'll create a new conn</span></div><div class="line">    <span class="comment">// 1. 首先检查池中可用连接数是否大于1</span></div><div class="line">    <span class="keyword">for</span> <span class="built_in">len</span>(conns) &gt; <span class="number">0</span> &#123;</div><div class="line">        conn := conns[<span class="built_in">len</span>(conns)<span class="number">-1</span>]</div><div class="line">        conns = conns[:<span class="built_in">len</span>(conns)<span class="number">-1</span>]</div><div class="line">        p.conns[addr] = conns</div><div class="line"></div><div class="line">        <span class="comment">// if conn is old kill it and move on</span></div><div class="line">        <span class="keyword">if</span> d := now - conn.created; d &gt; p.ttl &#123;</div><div class="line">            conn.Client.Close()</div><div class="line">            <span class="keyword">continue</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// we got a good conn, lets unlock and return it</span></div><div class="line">        p.Unlock()</div><div class="line"></div><div class="line">        <span class="comment">// 2. 直接返回池中连接</span></div><div class="line">        <span class="keyword">return</span> conn, <span class="literal">nil</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    p.Unlock()</div><div class="line"></div><div class="line">    <span class="comment">// create new conn</span></div><div class="line">    <span class="comment">// 3. 如果池中没有连接了，这时新建一个连接并返回</span></div><div class="line">    c, err := tr.Dial(addr, opts...)</div><div class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, err</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> &amp;poolConn&#123;c, time.Now().Unix()&#125;, <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 释放连接</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *pool)</span> <span class="title">release</span><span class="params">(addr <span class="keyword">string</span>, conn *poolConn, err error)</span></span> &#123;</div><div class="line">    <span class="comment">// don't store the conn if it has errored</span></div><div class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">        conn.Client.Close()</div><div class="line">        <span class="keyword">return</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// otherwise put it back for reuse</span></div><div class="line">    p.Lock()</div><div class="line">    conns := p.conns[addr]</div><div class="line">    <span class="comment">// 1. 检查池中连接数是否已达到最大，如果达到最大直接关闭连接</span></div><div class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(conns) &gt;= p.size &#123;</div><div class="line">        p.Unlock()</div><div class="line">        conn.Client.Close()</div><div class="line">        <span class="keyword">return</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 2. 未达到池中最大连接数将该连接放入池中</span></div><div class="line">    p.conns[addr] = <span class="built_in">append</span>(conns, conn)</div><div class="line">    p.Unlock()</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p><del>客户端配置register直接放到main方法获取测试用例中都可以调用到服务端，但是本地同样启个服务端然后在服务里面配置客户端register发现未生效，一直使用默认的consul。</del></p><p> 本地测试代码如下：</p> <figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 这种方式在测试用例中是可以调用成功的</span></div><div class="line"><span class="comment">// 但是如果和server一起启动，就会初始化失败，使用的register始终都是默认的consul</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestClient</span><span class="params">(t *testing.T)</span></span> &#123;</div><div class="line">    <span class="keyword">var</span> c client.Client</div><div class="line">    r := etcdv3.NewRegistry(registry.Addrs(<span class="string">"127.0.0.1:2379"</span>))</div><div class="line">    c = client.NewClient()</div><div class="line"></div><div class="line">    c.Init(client.Selector(</div><div class="line">        selector.NewSelector(selector.Registry(r))),</div><div class="line">        client.PoolSize(<span class="number">100</span>),                  <span class="comment">//连接池大小</span></div><div class="line">        client.PoolTTL(<span class="number">5</span>*time.Minute),         <span class="comment">//长连接缓存时间</span></div><div class="line">        client.Retries(<span class="number">3</span>),                     <span class="comment">//重试次数</span></div><div class="line">        client.RequestTimeout(<span class="number">30</span>*time.Second), <span class="comment">//请求超时</span></div><div class="line">        client.DialTimeout(<span class="number">2</span>*time.Second),     <span class="comment">//客户端连接超时</span></div><div class="line">        client.Transport(tcp.NewTransport()),</div><div class="line">    )</div><div class="line"></div><div class="line">    Client = service.NewDemoService(<span class="string">"demo.service"</span>, c)</div><div class="line">    rsp, err := Client.Do(context.TODO(), &amp;Request&#123;</div><div class="line">        Say: <span class="string">"hello"</span>,</div><div class="line">    &#125;)</div><div class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">        t.Errorf(<span class="string">"err %v\n"</span>, err)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol><p><strong>这篇博客只是关于go-micro的一个简单介绍以及入门使用，笔者也在学习阶段，随着研究的深入也会分享更多关于go-micro的只是给大家。</strong></p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://micro.mu/docs/go-micro.html" target="_blank" rel="external">Micro Documentation[go-micro]</a><br><a href="https://micro.mu/docs/writing-a-go-function.html" target="_blank" rel="external">Micro Documentation[function]</a><br><a href="https://github.com/micro/examples" target="_blank" rel="external">Micro examples repository</a><br><a href="http://hbchen.com/post/2018-03-27-go-micro-%E6%A1%86%E6%9E%B6%E4%BB%8B%E7%BB%8D/" target="_blank" rel="external">go-micro 框架介绍</a>  </p>]]></content>
    
    <summary type="html">
    
      &lt;!-- TOC --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#特性&quot;&gt;特性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#micro-toolkit&quot;&gt;micro toolkit&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#问题&quot;&gt;问题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#如何使用&quot;&gt;如何使用&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#安装服务注册发现中心&quot;&gt;安装服务注册发现中心&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#服务端&quot;&gt;服务端&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#客户端&quot;&gt;客户端&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#踩过的坑&quot;&gt;踩过的坑&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#参考文档&quot;&gt;参考文档&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /TOC --&gt;
    
    </summary>
    
      <category term="go-micro" scheme="http://yoursite.com/categories/go-micro/"/>
    
    
      <category term="golang" scheme="http://yoursite.com/tags/golang/"/>
    
      <category term="go-micro" scheme="http://yoursite.com/tags/go-micro/"/>
    
  </entry>
  
  <entry>
    <title>glide踩坑记</title>
    <link href="http://yoursite.com/2018/12/10/glide%E8%B8%A9%E5%9D%91%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/12/10/glide踩坑记/</id>
    <published>2018-12-10T12:18:00.000Z</published>
    <updated>2018-12-12T02:19:50.009Z</updated>
    
    <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#坑位">坑位</a></li></ul><!-- /TOC --><p>glide 我就不做过多介绍了，它是golang的包管理工具之一，由于该工具github上面不在维护，官方也推荐使用dep，所以之前也使用过dep，但是由于 dep 一直拉取不了 golang.org/x 相关依赖，无奈只能又切回 glide。</p><a id="more"></a><h2 id="坑位"><a href="#坑位" class="headerlink" title="坑位"></a>坑位</h2><ol><li><p>拉取 golang.org/x 相关包同样失败，报 Cannot detect VCS</p><ul><li><p>解决方案</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// 替换拉取镜像</div><div class="line">glide mirror set https://golang.org/x/mobile https://github.com/golang/mobile --vcs git</div><div class="line">glide mirror set https://golang.org/x/crypto https://github.com/golang/crypto --vcs git</div><div class="line">glide mirror set https://golang.org/x/net https://github.com/golang/net --vcs git</div><div class="line">glide mirror set https://golang.org/x/tools https://github.com/golang/tools --vcs git</div><div class="line">glide mirror set https://golang.org/x/text https://github.com/golang/text --vcs git</div><div class="line">glide mirror set https://golang.org/x/image https://github.com/golang/image --vcs git</div><div class="line">glide mirror set https://golang.org/x/sys https://github.com/golang/sys --vcs git</div></pre></td></tr></table></figure></li></ul></li><li><p>私库的包拉取不了</p><ul><li><p>解决方案</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 同样替换拉取镜像</div><div class="line">glide mirror set [本地代码中import的包名,例如：test/keng] [对应私库的地址（http://host/test/keng] --vcs git</div></pre></td></tr></table></figure></li></ul></li><li><p>无法拉取子包</p><p> 假设你要拉取的包在glide.yaml中配置如下：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- package: golang.org/x/net/context</div></pre></td></tr></table></figure><p> 此时同样会报 Cannot detect VCS，因为不支持拉取子包</p><ul><li><p>解决方案</p><p>修改glide.yaml中的配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- package: golang.org/x/net</div><div class="line">  subpackages:</div><div class="line">  - context</div></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;!-- TOC --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#坑位&quot;&gt;坑位&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /TOC --&gt;
&lt;p&gt;glide 我就不做过多介绍了，它是golang的包管理工具之一，由于该工具github上面不在维护，官方也推荐使用dep，所以之前也使用过dep，但是由于 dep 一直拉取不了 golang.org/x 相关依赖，无奈只能又切回 glide。&lt;/p&gt;
    
    </summary>
    
      <category term="golang" scheme="http://yoursite.com/categories/golang/"/>
    
    
      <category term="glide" scheme="http://yoursite.com/tags/glide/"/>
    
      <category term="golang" scheme="http://yoursite.com/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>goland debug 报 include nested too deeply 问题排查</title>
    <link href="http://yoursite.com/2018/11/29/goland%E8%B0%83%E8%AF%95(debug)%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/"/>
    <id>http://yoursite.com/2018/11/29/goland调试(debug)问题排查/</id>
    <published>2018-11-29T02:21:00.000Z</published>
    <updated>2018-11-29T02:23:58.777Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h2><p>系统：MacOS10.14.1<br>goland版本：2018.2.2<br>golang版本：go1.11.2 darwin/amd64  </p><a id="more"></a><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>当使用goland debug调试代码时，首先要开始编译，编译会报如下错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div></pre></td><td class="code"><pre><div class="line">GOROOT=/usr/local/Cellar/go/1.11/libexec #gosetup</div><div class="line">GOPATH=/path/to/golang/lib:/path/to/golang/workspace #gosetup</div><div class="line">/usr/local/Cellar/go/1.11/libexec/bin/go build -o /private/var/folders/xs/lp65n5c92gb76wj4zllw1dmr0000gp/T/___go_build_main_go -gcflags &quot;all=-N -l&quot; /path/to/main.go #gosetup</div><div class="line"># runtime/cgo</div><div class="line">In file included from _cgo_export.c:3:</div><div class="line">In file included from /usr/include/stdlib.h:66:</div><div class="line">In file included from /usr/include/sys/wait.h:110:</div><div class="line">In file included from /usr/include/sys/resource.h:72:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">In file included from /usr/local/include/stdint.h:59:</div><div class="line">/usr/local/include/stdint.h:2:10: error: #include nested too deeply</div><div class="line">/usr/local/include/stdint.h:59:11: error: #include nested too deeply</div><div class="line">/usr/local/include/stdint.h:72:11: error: #include nested too deeply</div><div class="line">/usr/local/include/stdint.h:76:10: error: #include nested too deeply</div><div class="line">/usr/local/include/stdint.h:82:11: error: #include nested too deeply</div><div class="line">In file included from _cgo_export.c:3:</div><div class="line">In file included from /usr/include/stdlib.h:66:</div><div class="line">In file included from /usr/include/sys/wait.h:110:</div><div class="line">/usr/include/sys/resource.h:197:2: error: unknown type name &apos;uint64_t&apos;</div><div class="line">/usr/include/sys/resource.h:198:2: error: unknown type name &apos;uint64_t&apos;</div><div class="line">/usr/include/sys/resource.h:199:2: error: unknown type name &apos;uint64_t&apos;</div><div class="line">/usr/include/sys/resource.h:200:2: error: unknown type name &apos;uint64_t&apos;</div><div class="line">/usr/include/sys/resource.h:201:2: error: unknown type name &apos;uint64_t&apos;</div><div class="line">/usr/include/sys/resource.h:202:2: error: unknown type name &apos;uint64_t&apos;</div><div class="line">/usr/include/sys/resource.h:203:2: error: unknown type name &apos;uint64_t&apos;</div><div class="line">/usr/include/sys/resource.h:204:2: error: unknown type name &apos;uint64_t&apos;</div><div class="line">/usr/include/sys/resource.h:205:2: error: unknown type name &apos;uint64_t&apos;</div><div class="line">/usr/include/sys/resource.h:206:2: error: unknown type name &apos;uint64_t&apos;</div><div class="line">/usr/include/sys/resource.h:211:2: error: unknown type name &apos;uint64_t&apos;</div><div class="line">/usr/include/sys/resource.h:212:2: error: unknown type name &apos;uint64_t&apos;</div><div class="line">/usr/include/sys/resource.h:213:2: error: unknown type name &apos;uint64_t&apos;</div><div class="line">/usr/include/sys/resource.h:214:2: error: unknown type name &apos;uint64_t&apos;</div><div class="line">fatal error: too many errors emitted, stopping now [-ferror-limit=]</div><div class="line"></div><div class="line">Compilation finished with exit code 2</div></pre></td></tr></table></figure><p>正常run启动不会报该错误，经过对比发现正常run的时候执行的build命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/local/Cellar/go/1.11/libexec/bin/go build -i -o /private/var/folders/xs/lp65n5c92gb76wj4zllw1dmr0000gp/T/___go_build_main_go /path/to/main.go #gosetup</div></pre></td></tr></table></figure><p>区别就是debug时候会多 -gcflags “all=-N -l” 参数，加了这个参数就会报错。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>网上也搜索了很多关于加这个参数报错的原因，没有具体的解决方案。后来通过搜索错误日志里面的 error: #include nested too deeply 这个描述，终于找到<a href="https://github.com/SOHU-Co/kafka-node/issues/881#issuecomment-396197724" target="_blank" rel="external">解决方案</a>，方法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mkdir /tmp/includes</div><div class="line">brew doctor 2&gt;&amp;1 | grep &quot;/usr/local/include&quot; | awk &apos;&#123;$1=$1;print&#125;&apos; | xargs -I _ mv _ /tmp/includes</div></pre></td></tr></table></figure><p>也是瞎猫碰到死耗子解决了，把这个问题分享出来希望对遇到的人有帮助。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;环境说明&quot;&gt;&lt;a href=&quot;#环境说明&quot; class=&quot;headerlink&quot; title=&quot;环境说明&quot;&gt;&lt;/a&gt;环境说明&lt;/h2&gt;&lt;p&gt;系统：MacOS10.14.1&lt;br&gt;goland版本：2018.2.2&lt;br&gt;golang版本：go1.11.2 darwin/amd64  &lt;/p&gt;
    
    </summary>
    
      <category term="golang" scheme="http://yoursite.com/categories/golang/"/>
    
      <category term="goland" scheme="http://yoursite.com/categories/golang/goland/"/>
    
    
      <category term="golang" scheme="http://yoursite.com/tags/golang/"/>
    
      <category term="goland" scheme="http://yoursite.com/tags/goland/"/>
    
      <category term="debug" scheme="http://yoursite.com/tags/debug/"/>
    
  </entry>
  
  <entry>
    <title>使用feign上传下载文件扩展包填坑记</title>
    <link href="http://yoursite.com/2018/04/04/%E4%BD%BF%E7%94%A8fegin%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6%E6%89%A9%E5%B1%95%E5%8C%85%E5%A1%AB%E5%9D%91%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/04/04/使用fegin上传下载文件扩展包填坑记/</id>
    <published>2018-04-04T14:51:30.000Z</published>
    <updated>2018-04-09T16:11:54.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>先把有坑的代码贴上：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//...上下文我就省略了，把有问题的代码段贴出来</span></div><div class="line"></div><div class="line">InputStream inputStream = <span class="keyword">null</span>;</div><div class="line">inputStream = fresp.body().asInputStream();</div><div class="line">FileTypeJudger.FileInfo fileInfo = fileTypeJudger.judgeToFileInfo(inputStream);</div><div class="line">mimeType = fileInfo.getMimeType();</div><div class="line"><span class="comment">// 必须将游标设置到起始位置，才能输出完整的文件流</span></div><div class="line">inputStream.reset(); <span class="comment">//这里就是有坑的地方</span></div><div class="line"></div><div class="line"><span class="comment">//...</span></div></pre></td></tr></table></figure></p><a id="more"></a><p>以上代码在最后一行会抛出如下异常：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java.io.IOException: mark/reset not supported</div></pre></td></tr></table></figure></p><p>但是我在开发和测试环境都验证过，<code>fresp.body().asInputStream()</code>返回的是<code>ByteArrayInputStream</code>类型，也就是说最后一行是支持reset操作的。</p><h2 id="排查记录"><a href="#排查记录" class="headerlink" title="排查记录"></a>排查记录</h2><ol><li><p>查看feign源码发现<code>asInputStream()</code>方法有两个实现，分别是<code>ByteArrayBody</code>和<code>InputStreamBody</code>，源码如下：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ByteArrayBody实现</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> InputStream <span class="title">asInputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> ByteArrayInputStream(data);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// InputStreamBody实现</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> InputStream <span class="title">asInputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">  <span class="keyword">return</span> inputStream;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p> 可以看出只有调用<code>InputStreamBody</code>实现的<code>asInputStream()</code>方法才会出现上面的异常。</p></li><li><p>然后在本地发起请求，开启debug模式，一步一步跟发现没有问题，每次都是走到<code>ByteArrayBody</code>，这让我郁闷了很长时间啊。</p></li><li><p>然后尝试跟踪<code>ByteArrayInputStream</code>实例中传递的<code>data</code>的初始化流程。发现是在<code>ByteArrayBody</code>类的构造函数中初始化的。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 构造函数</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ByteArrayBody</span><span class="params">(<span class="keyword">byte</span>[] data)</span> </span>&#123;</div><div class="line">  <span class="keyword">this</span>.data = data;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p> 再跟踪构造函数，发现在<code>orNull()</code>方法中被调用了</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// orNull 方法</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Body <span class="title">orNull</span><span class="params">(<span class="keyword">byte</span>[] data)</span> </span>&#123;</div><div class="line">  <span class="keyword">if</span> (data == <span class="keyword">null</span>) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> ByteArrayBody(data);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p> 再跟踪<code>orNull()</code>方法，发现在<code>Response.Builder</code>类中的被调用，调用方法如下：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Builder <span class="title">body</span><span class="params">(<span class="keyword">byte</span>[] data)</span> </span>&#123;</div><div class="line">  <span class="keyword">this</span>.body = ByteArrayBody.orNull(data);</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p> 再跟踪<code>body()</code>方法，发现有两个地方会调用，<code>Logger</code>和<code>SynchronousMethodHandler</code>两个类中会调用。</p></li><li><p>然后先在<code>SynchronousMethodHandler</code>的方法中debug，代码片段如下：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object[] argv)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">  RequestTemplate template = buildTemplateFromArgs.create(argv);</div><div class="line">  Retryer retryer = <span class="keyword">this</span>.retryer.clone();</div><div class="line">  <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      <span class="keyword">return</span> executeAndDecode(template);</div><div class="line">    &#125; <span class="keyword">catch</span> (RetryableException e) &#123;</div><div class="line">      retryer.continueOrPropagate(e);</div><div class="line">      <span class="keyword">if</span> (logLevel != Logger.Level.NONE) &#123;</div><div class="line">        logger.logRetry(metadata.configKey(), logLevel);</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">continue</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">Object <span class="title">executeAndDecode</span><span class="params">(RequestTemplate template)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">  Request request = targetRequest(template);</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (logLevel != Logger.Level.NONE) &#123;</div><div class="line">    logger.logRequest(metadata.configKey(), logLevel, request);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  Response response;</div><div class="line">  <span class="keyword">long</span> start = System.nanoTime();</div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    response = client.execute(request, options);</div><div class="line">    <span class="comment">// ensure the request is set. <span class="doctag">TODO:</span> remove in Feign 10</span></div><div class="line">    response.toBuilder().request(request).build();</div><div class="line">  &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">    <span class="keyword">if</span> (logLevel != Logger.Level.NONE) &#123;</div><div class="line">      logger.logIOException(metadata.configKey(), logLevel, e, elapsedTime(start));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">throw</span> errorExecuting(request, e);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">long</span> elapsedTime = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);</div><div class="line"></div><div class="line">  <span class="keyword">boolean</span> shouldClose = <span class="keyword">true</span>;</div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    <span class="keyword">if</span> (logLevel != Logger.Level.NONE) &#123;</div><div class="line">      response =</div><div class="line">          logger.logAndRebufferResponse(metadata.configKey(), logLevel, response, elapsedTime);</div><div class="line">      <span class="comment">// ensure the request is set. <span class="doctag">TODO:</span> remove in Feign 10</span></div><div class="line">      response.toBuilder().request(request).build();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (Response.class == metadata.returnType()) &#123;</div><div class="line">      <span class="keyword">if</span> (response.body() == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span> response;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">if</span> (response.body().length() == <span class="keyword">null</span> ||</div><div class="line">              response.body().length() &gt; MAX_RESPONSE_BUFFER_SIZE) &#123;</div><div class="line">        shouldClose = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">return</span> response;</div><div class="line">      &#125;</div><div class="line">      <span class="comment">// Ensure the response body is disconnected</span></div><div class="line">      <span class="keyword">byte</span>[] bodyData = Util.toByteArray(response.body().asInputStream());</div><div class="line"></div><div class="line">      <span class="comment">// 此处就是调用body方法的地方，断点打到这里，在实际debug过程中发现并没有走到这里</span></div><div class="line">      <span class="keyword">return</span> response.toBuilder().body(bodyData).build();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (response.status() &gt;= <span class="number">200</span> &amp;&amp; response.status() &lt; <span class="number">300</span>) &#123;</div><div class="line">      <span class="keyword">if</span> (<span class="keyword">void</span>.class == metadata.returnType()) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> decode(response);</div><div class="line">      &#125;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (decode404 &amp;&amp; response.status() == <span class="number">404</span> &amp;&amp; <span class="keyword">void</span>.class != metadata.returnType()) &#123;</div><div class="line">      <span class="keyword">return</span> decode(response);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">throw</span> errorDecoder.decode(metadata.configKey(), response);</div><div class="line">    &#125;</div><div class="line">  &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">    <span class="keyword">if</span> (logLevel != Logger.Level.NONE) &#123;</div><div class="line">      logger.logIOException(metadata.configKey(), logLevel, e, elapsedTime);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">throw</span> errorReading(request, response, e);</div><div class="line">  &#125; <span class="keyword">finally</span> &#123;</div><div class="line">    <span class="keyword">if</span> (shouldClose) &#123;</div><div class="line">      ensureClosed(response.body());</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>然后在<code>Logger</code>的方法中debug，代码片段如下：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> Response <span class="title">logAndRebufferResponse</span><span class="params">(String configKey, Level logLevel, Response response,</span></span></div><div class="line">                                        <span class="keyword">long</span> elapsedTime) <span class="keyword">throws</span> IOException &#123;</div><div class="line">  String reason = response.reason() != <span class="keyword">null</span> &amp;&amp; logLevel.compareTo(Level.NONE) &gt; <span class="number">0</span> ?</div><div class="line">      <span class="string">" "</span> + response.reason() : <span class="string">""</span>;</div><div class="line">  <span class="keyword">int</span> status = response.status();</div><div class="line">  log(configKey, <span class="string">"&lt;--- HTTP/1.1 %s%s (%sms)"</span>, status, reason, elapsedTime);</div><div class="line">  <span class="keyword">if</span> (logLevel.ordinal() &gt;= Level.HEADERS.ordinal()) &#123;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (String field : response.headers().keySet()) &#123;</div><div class="line">      <span class="keyword">for</span> (String value : valuesOrEmpty(response.headers(), field)) &#123;</div><div class="line">        log(configKey, <span class="string">"%s: %s"</span>, field, value);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> bodyLength = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (response.body() != <span class="keyword">null</span> &amp;&amp; !(status == <span class="number">204</span> || status == <span class="number">205</span>)) &#123;</div><div class="line">      <span class="comment">// HTTP 204 No Content "...response MUST NOT include a message-body"</span></div><div class="line">      <span class="comment">// HTTP 205 Reset Content "...response MUST NOT include an entity"</span></div><div class="line">      <span class="keyword">if</span> (logLevel.ordinal() &gt;= Level.FULL.ordinal()) &#123;</div><div class="line">        log(configKey, <span class="string">""</span>); <span class="comment">// CRLF</span></div><div class="line">      &#125;</div><div class="line">      <span class="keyword">byte</span>[] bodyData = Util.toByteArray(response.body().asInputStream());</div><div class="line">      bodyLength = bodyData.length;</div><div class="line">      <span class="keyword">if</span> (logLevel.ordinal() &gt;= Level.FULL.ordinal() &amp;&amp; bodyLength &gt; <span class="number">0</span>) &#123;</div><div class="line">        log(configKey, <span class="string">"%s"</span>, decodeOrDefault(bodyData, UTF_8, <span class="string">"Binary data"</span>));</div><div class="line">      &#125;</div><div class="line">      log(configKey, <span class="string">"&lt;--- END HTTP (%s-byte body)"</span>, bodyLength);</div><div class="line"></div><div class="line">      <span class="comment">// 此处会调用body方法，并且我在本地调试的时候确实会走到此处</span></div><div class="line">      <span class="keyword">return</span> response.toBuilder().body(bodyData).build();</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      log(configKey, <span class="string">"&lt;--- END HTTP (%s-byte body)"</span>, bodyLength);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> response;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>最后发现，原来我之前在开发和测试环境一直配置的日志打印级别都是debug，feign中的日志只有配置了debug级别才会输出，上面的代码其实就是当判断需要输出日志时，会先把输入流转成byte array缓存起来，并且会封装成ByteArrayBody方便后续复用该流。生产上面配置的日志级别是info，所以会封装成InputStreamBody，也就导致后续获取的输入流是不支持mark的。</p></li></ol><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//...上下文我就省略了，把有问题的代码段贴出来</span></div><div class="line"></div><div class="line">InputStream inputStream = <span class="keyword">null</span>;</div><div class="line">inputStream = fresp.body().asInputStream();</div><div class="line">Util.checkNotNull(inputStream, <span class="string">"inputstream from edfs is null"</span>);</div><div class="line"><span class="comment">// 校验流是否支持标记</span></div><div class="line"><span class="keyword">if</span> (!inputStream.markSupported()) &#123;</div><div class="line">    inputStream = <span class="keyword">new</span> ByteArrayInputStream(Util.toByteArray(inputStream));</div><div class="line">&#125;</div><div class="line">FileTypeJudger.FileInfo fileInfo = fileTypeJudger.judgeToFileInfo(inputStream);</div><div class="line">mimeType = fileInfo.getMimeType();</div><div class="line"><span class="comment">// 必须将游标设置到起始位置，才能输出完整的文件流</span></div><div class="line">inputStream.reset();</div><div class="line"></div><div class="line"><span class="comment">//...</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;先把有坑的代码贴上：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//...上下文我就省略了，把有问题的代码段贴出来&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;InputStream inputStream = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;inputStream = fresp.body().asInputStream();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;FileTypeJudger.FileInfo fileInfo = fileTypeJudger.judgeToFileInfo(inputStream);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;mimeType = fileInfo.getMimeType();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 必须将游标设置到起始位置，才能输出完整的文件流&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;inputStream.reset(); &lt;span class=&quot;comment&quot;&gt;//这里就是有坑的地方&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//...&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="feign" scheme="http://yoursite.com/categories/feign/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="feign" scheme="http://yoursite.com/tags/feign/"/>
    
  </entry>
  
  <entry>
    <title>八大排序算法的java实现</title>
    <link href="http://yoursite.com/2017/02/17/8-sort-arithmetic-of-java/"/>
    <id>http://yoursite.com/2017/02/17/8-sort-arithmetic-of-java/</id>
    <published>2017-02-17T14:25:52.000Z</published>
    <updated>2017-03-04T14:32:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>每当提到算法，自然少不了各种排序算法，例如冒泡排序，快速排序等等。这篇文章将会介绍用java来实现各种排序算法，一来是自己再巩固一下这一块知识的，二来是将这块知识分享给大家，希望大家和我一起进步。<br><a id="more"></a></p><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><blockquote><p>基本思想：<br>假设有一组个数为n的数，从第二数开始，按照比较规则插入到之前的数中，这样前面两个数就已经是排好序的，然后在从第三个数开始按照同样的规则插入到之前的数中，依次类推直到操作到第n个数。</p></blockquote><p>下面是具体实现源码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertionSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> j;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</div><div class="line">        <span class="keyword">int</span> tmp = arr[i];</div><div class="line">        <span class="keyword">for</span>(j = i; j &gt; <span class="number">0</span>; j--) &#123;</div><div class="line">            <span class="keyword">if</span> ( tmp &lt; arr[j - <span class="number">1</span>]) &#123;</div><div class="line">                arr[j] = arr[j - <span class="number">1</span>];</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        arr[j] = tmp;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><blockquote><p>基本思想：<br>算法先将要排序的一组数按某个增量d（n/2,n为要排序数的个数）分成若干组，每组中记录的下标相差d.对每组中全部元素进行直接插入排序，然后再用一个较小的增量（d/2）对它进行分组，在每组中再进行直接插入排序。当增量减到1时，进行直接插入排序后，排序完成。</p></blockquote><p>下面是具体实现源码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shellSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> d1 = arr.length;</div><div class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">        d1 = (<span class="keyword">int</span>) Math.ceil(d1 / <span class="number">2</span>);</div><div class="line">        <span class="keyword">int</span> d = d1;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; d; x++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = x + d;i &lt; arr.length;i += d)&#123;</div><div class="line">                <span class="keyword">int</span> j = i - d;</div><div class="line">                <span class="keyword">int</span> temp = arr[i];</div><div class="line">                <span class="keyword">for</span> (; j &gt;= <span class="number">0</span> &amp;&amp; temp &lt; arr[j]; j -= d) &#123;</div><div class="line">                    arr[j+d] =arr[j];</div><div class="line">                &#125;</div><div class="line">                arr[j+d] = temp;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (d == <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="简单选择排序"><a href="#简单选择排序" class="headerlink" title="简单选择排序"></a>简单选择排序</h2><blockquote><p>基本思想：<br>在要排序的一组数中，选出最小的一个数与第一个位置的数交换然后在剩下的数当中再找最小的与第二个位置的数交换，如此循环到倒数第二个数和最后一个数比较为止。</p></blockquote><p>下面是具体实现源码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</div><div class="line">            <span class="keyword">if</span> (arr[j] &lt; arr[i]) &#123;</div><div class="line">                <span class="keyword">int</span> tmp = arr[i];</div><div class="line">                arr[i] = arr[j];</div><div class="line">                arr[j] = tmp;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><blockquote><p>基本思想：<br>堆排序是一种树形选择排序，是对直接选择排序的有效改进。<br>堆的定义如下：<br>具有n个元素的序列（h1,h2,…,hn),当且仅当满足（hi&gt;=h2i,hi&gt;=2i+1）或（hi&lt;=h2i,hi&lt;=2i+1） (i=1,2,…,n/2)时称之为堆。<br>在这里只讨论满足前者条件的堆。由堆的定义可以看出，堆顶元素（即第一个元素）必为最大项（大顶堆）。完全二叉树可以很直观地表示堆的结构。堆顶为根，其它为左子树、右子树。初始时把要排序的数的序列看作是一棵顺序存储的二叉树，调整它们的存储序，使之成为一个堆，这时堆的根节点的数最大。然后将根节点与堆的最后一个节点交换。然后对前面(n-1)个数重新调整使之成为堆。依此类推，直到只有两个节点的堆，并对它们作交换，最后得到有n个节点的有序序列。从算法描述来看，堆排序需要两个过程，一是建立堆，二是堆顶与堆的最后一个元素交换位置。所以堆排序有两个函数组成。一是建堆的渗透函数，二是反复调用渗透函数实现排序的函数。</p></blockquote><p>下面是具体实现源码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeapSort</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">heapSort</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> arrayLength = a.length;</div><div class="line">        <span class="comment">//循环建堆  </span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrayLength - <span class="number">1</span>; i++)&#123;</div><div class="line">            <span class="comment">//建堆  </span></div><div class="line">            buildMaxHeap(a, arrayLength - <span class="number">1</span> - i);</div><div class="line">            <span class="comment">//交换堆顶和最后一个元素</span></div><div class="line">            swap(a, <span class="number">0</span>, arrayLength - <span class="number">1</span> - i);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//交换位置</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] data, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> tmp = data[i];</div><div class="line">        data[i] = data[j];</div><div class="line">        data[j] = tmp;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//建堆</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">buildMaxHeap</span><span class="params">(<span class="keyword">int</span>[] data, <span class="keyword">int</span> lastIndex)</span> </span>&#123;</div><div class="line">        <span class="comment">//从lastIndex处节点（最后一个节点）的父节点开始</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = (lastIndex - <span class="number">1</span>) / <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</div><div class="line">            <span class="comment">//k保存正在判断的节点</span></div><div class="line">            <span class="keyword">int</span> k = i;</div><div class="line">            <span class="comment">//如果当前k节点的子节点存在  </span></div><div class="line">            <span class="keyword">while</span> (k * <span class="number">2</span> + <span class="number">1</span> &lt;= lastIndex) &#123;</div><div class="line">                <span class="comment">//k节点的左子节点的索引  </span></div><div class="line">                <span class="keyword">int</span> biggerIndex = <span class="number">2</span> * k + <span class="number">1</span>;</div><div class="line">                <span class="comment">//如果biggerIndex小于lastIndex，即biggerIndex+1代表的k节点的右子节点存在  </span></div><div class="line">                <span class="keyword">if</span> (biggerIndex &lt; lastIndex) &#123;</div><div class="line">                    <span class="comment">//若果右子节点的值较大  </span></div><div class="line">                    <span class="keyword">if</span> (data[biggerIndex] &lt; data[biggerIndex + <span class="number">1</span>]) &#123;</div><div class="line">                        <span class="comment">//biggerIndex总是记录较大子节点的索引  </span></div><div class="line">                        biggerIndex++;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="comment">//如果k节点的值小于其较大的子节点的值  </span></div><div class="line">                <span class="keyword">if</span> (data[k] &lt; data[biggerIndex]) &#123;</div><div class="line">                    <span class="comment">//交换他们  </span></div><div class="line">                    swap(data, k, biggerIndex);</div><div class="line">                    <span class="comment">//将biggerIndex赋予k，开始while循环的下一次循环，重新保证k节点的值大于其左右子节点的值  </span></div><div class="line">                    k = biggerIndex;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><blockquote><p>基本思想：<br>假设有一个长度为n的数组，从第一个位置开始，每两个相邻的位置的数值进行比较，如果前面一个位置的数值比后面一个位置的数值大，就交换这两个位置的数值，当最后一对数比较完毕之后，最后一个位置的数值就是最大值。然后我们再以相同的步骤操作数组中除了最后一个位置的所有值，直到没有任何一对数值需要比较。</p></blockquote><p>下面是具体实现源码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span>; j++) &#123;</div><div class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</div><div class="line">                <span class="keyword">int</span> tmp = arr[j];</div><div class="line">                arr[j] = arr[j + <span class="number">1</span>];</div><div class="line">                arr[j + <span class="number">1</span>] = tmp;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><blockquote><p>基本思想：<br>假设有一个长度为n的集合，将中间的元素作为中轴，把集合中的所有小于该中轴的元素放在中轴左边，把集合中的所有大于该中轴的元素放在右边，然后在以相同的逻辑分别处理中轴左边和右边的集合，依次递归，直到中轴左边和右边的元素个数都为1。</p></blockquote><p>下面是具体实现代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fastSort</span><span class="params">(List&lt;Integer&gt; items)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (items.size() &gt; <span class="number">1</span>) &#123;</div><div class="line">        List&lt;Integer&gt; smaller = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        List&lt;Integer&gt; same = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        List&lt;Integer&gt; larger = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">        Integer chosenItem = items.get(items.size() / <span class="number">2</span>);</div><div class="line">        <span class="keyword">for</span> (Integer item : items) &#123;</div><div class="line">            <span class="keyword">if</span> (item &lt; chosenItem) &#123;</div><div class="line">                smaller.add(item);</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (item &gt; chosenItem) &#123;</div><div class="line">                larger.add(item);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                same.add(item);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        fastSort(smaller);</div><div class="line">        fastSort(larger);</div><div class="line"></div><div class="line">        items.clear();</div><div class="line">        items.addAll(smaller);</div><div class="line">        items.addAll(same);</div><div class="line">        items.addAll(larger);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><blockquote><p>基本思想：<br>归并（Merge）排序法是将两个（或两个以上）有序表合并成一个新的有序表，即把待排序序列分为若干个子序列，每个子序列是有序的。然后再把有序子序列合并为整体有序序列。</p></blockquote><p>下面是具体实现代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeSort</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span> data[], <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (start &lt; end) &#123;</div><div class="line">            <span class="keyword">int</span> mid = (start + end) / <span class="number">2</span>;</div><div class="line">            sort(data, start, mid);</div><div class="line">            sort(data, mid + <span class="number">1</span>, end);</div><div class="line">            merge(data, start, mid, end);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> data[], <span class="keyword">int</span> start, <span class="keyword">int</span> mid, <span class="keyword">int</span> end)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> temp[] = <span class="keyword">new</span> <span class="keyword">int</span>[end - start + <span class="number">1</span>];</div><div class="line">        <span class="keyword">int</span> i = start;</div><div class="line">        <span class="keyword">int</span> j = mid + <span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> k = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= end) &#123;</div><div class="line">            <span class="keyword">if</span> (data[i] &lt; data[j]) &#123;</div><div class="line">                temp[k++] = data[i++];</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                temp[k++] = data[j++];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">while</span> (i &lt;= mid) &#123;</div><div class="line">            temp[k++] = data[i++];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span> (j &lt;= end) &#123;</div><div class="line">            temp[k++] = data[j++];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (k = <span class="number">0</span>, i = start; k &lt; temp.length; k++, i++) &#123;</div><div class="line">            data[i] = temp[k];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h2><blockquote><p>基本思想：<br>将所有待比较数值（正整数）统一为同样的数位长度，数位较短的数前面补零。然后，从最低位开始，依次进行一次排序。这样从最低位排序一直到最高位排序完成以后,数列就变成一个有序序列。</p></blockquote><p>下面是具体实现代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">radixSort</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>&#123;</div><div class="line">        <span class="comment">//首先确定排序的趟数;</span></div><div class="line">        <span class="keyword">int</span> max = array[<span class="number">0</span>];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; array.length; i++) &#123;</div><div class="line">            <span class="keyword">if</span> (array[i] &gt; max) &#123;</div><div class="line">                max = array[i];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> time = <span class="number">0</span>;</div><div class="line">        <span class="comment">//判断位数;</span></div><div class="line">        <span class="keyword">while</span> (max &gt; <span class="number">0</span>) &#123;</div><div class="line">            max /= <span class="number">10</span>;</div><div class="line">            time++;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//建立10个队列;</span></div><div class="line">        List&lt;ArrayList&gt; queue = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">            ArrayList&lt;Integer&gt; queue1 = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">            queue.add(queue1);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//进行time次分配和收集;</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; time; i++) &#123;</div><div class="line">            <span class="comment">//分配数组元素;</span></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; array.length; j++) &#123;</div><div class="line">                <span class="comment">//得到数字的第time+1位数;</span></div><div class="line">                <span class="keyword">int</span> x = array[j] % (<span class="keyword">int</span>) Math.pow(<span class="number">10</span>, i + <span class="number">1</span>) / (<span class="keyword">int</span>) Math.pow(<span class="number">10</span>, i);</div><div class="line">                ArrayList&lt;Integer&gt; queue2 = queue.get(x);</div><div class="line">                queue2.add(array[j]);</div><div class="line">                queue.set(x, queue2);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">int</span> count = <span class="number">0</span>;<span class="comment">//元素计数器;</span></div><div class="line">            <span class="comment">//收集队列元素;</span></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">10</span>; k++) &#123;</div><div class="line">                <span class="keyword">while</span> (queue.get(k).size() &gt; <span class="number">0</span>) &#123;</div><div class="line">                    ArrayList&lt;Integer&gt; queue3 = queue.get(k);</div><div class="line">                    array[count] = queue3.get(<span class="number">0</span>);</div><div class="line">                    queue3.remove(<span class="number">0</span>);</div><div class="line">                    count++;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;每当提到算法，自然少不了各种排序算法，例如冒泡排序，快速排序等等。这篇文章将会介绍用java来实现各种排序算法，一来是自己再巩固一下这一块知识的，二来是将这块知识分享给大家，希望大家和我一起进步。&lt;br&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>我的第一篇博客从使用Hexo搭建博客开始</title>
    <link href="http://yoursite.com/2017/02/04/my-first-blog-start-with-build-blog-using-hexo/"/>
    <id>http://yoursite.com/2017/02/04/my-first-blog-start-with-build-blog-using-hexo/</id>
    <published>2017-02-04T15:17:52.000Z</published>
    <updated>2017-02-05T09:15:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo是一款快速、简洁且高效的博客框架，用它来搭建自己的个人博客是一个不错的选择。这篇文章主要介绍我是如何使用该框架来搭建自己的个人博客。</p><a id="more"></a><h2 id="Hexo安装及相关配置"><a href="#Hexo安装及相关配置" class="headerlink" title="Hexo安装及相关配置"></a>Hexo安装及相关配置</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><code>Hexo</code>安装很简单，<code>mac</code>和<code>windows</code>都有详细的安装教程，这里提供一个<a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="external">hexo官方详细的安装教程链接</a>。</p><p>打开本地终端，然后执行以下命令，初始化工作目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ hexo init &lt;folder-path&gt;</div><div class="line">$ cd &lt;folder-path&gt;</div><div class="line">$ npm install</div></pre></td></tr></table></figure></p><p>执行完以上命令之后，工作目录就初始化完成了。</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>进入工作目录会发现有一个<code>_config.yml</code>的文件，配置就是在这个文件中添加和修改的。</p><p>这里简单介绍一下几个常用的参数：</p><table><thead><tr><th>参数名</th><th>描述</th></tr></thead><tbody><tr><td><code>title</code></td><td>网站标题</td></tr><tr><td><code>subtitle</code></td><td>网站副标题</td></tr><tr><td><code>description</code></td><td>网站描述</td></tr><tr><td><code>author</code></td><td>你的名字</td></tr><tr><td><code>language</code></td><td>网站使用的语言，例如<code>zh-Hans</code>就是指中文</td></tr><tr><td><code>timezone</code></td><td>网站时区，例如<code>Asia/Shanghai</code>就是指上海时区</td></tr><tr><td><code>theme</code></td><td>网站主题，使用之前需要先安装</td></tr><tr><td><code>avatar</code></td><td>你的头像</td></tr><tr><td><code>favicon</code></td><td>网页tag的小图标</td></tr></tbody></table><p>这些知识简单介绍一下，具体的配置说明详见<a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="external">Hexo官方配置说明</a></p><h2 id="Hexo主题Next安装及相关配置"><a href="#Hexo主题Next安装及相关配置" class="headerlink" title="Hexo主题Next安装及相关配置"></a>Hexo主题Next安装及相关配置</h2><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><p>打开终端，执行如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cd &lt;folder-path&gt;</div><div class="line">$ git clone https://github.com/iissnan/hexo-theme-next themes/next</div></pre></td></tr></table></figure></p><p>命令执行完成之后，编辑<code>_config.yml</code>文件，将<code>theme</code>参数的修改成<code>next</code>。</p><p>然后执行如下命令，清除<code>Hexo</code>缓存：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo clean</div></pre></td></tr></table></figure></p><h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><p><code>Next</code>主题也有很多配置参数，这里我还是简单介绍一些常用的：</p><table><thead><tr><th>参数名</th><th>描述</th></tr></thead><tbody><tr><td><code>scheme</code></td><td>外观配置，支持三种（<code>Muse</code>,<code>Mist</code>,<code>Pisces</code>）</td></tr><tr><td><code>language</code></td><td>网站语言，和<code>Hexo</code>中的类似</td></tr><tr><td><code>menu</code></td><td>菜单配置</td></tr></tbody></table><p>具体的配置说明详见<a href="http://theme-next.iissnan.com/getting-started.html#theme-settings" target="_blank" rel="external">Next官方配置说明</a>。</p><h2 id="将网站托管到github上"><a href="#将网站托管到github上" class="headerlink" title="将网站托管到github上"></a>将网站托管到github上</h2><h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><p>github中创建一个仓库这里就不详细说明了，把几点注意事项说明一下：</p><ul><li><strong>仓库必须是public的</strong></li><li><strong>仓库名称要以yourname.github.io的格式命名</strong></li><li><strong>将本地机器的公钥添加到你的github中</strong></li></ul><h3 id="关联本地网站到github仓库中"><a href="#关联本地网站到github仓库中" class="headerlink" title="关联本地网站到github仓库中"></a>关联本地网站到github仓库中</h3><p>在<code>Hexo</code>的配置文件<code>_config.yml</code>中修改如下配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repository: &lt;你的github新建的仓库地址&gt;</div><div class="line">  branch: master</div></pre></td></tr></table></figure></p><p>修改完成之后，我们可以打开终端执行如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ hexo clean</div><div class="line">$ hexo g</div><div class="line">$ hexo d</div></pre></td></tr></table></figure></p><p>将网站部署到github中。</p><p>部署完成之后你可以通过访问 <a href="https://yourname.github.io" target="_blank" rel="external">https://yourname.github.io</a> 地址，如果能够访问，说明你在本地配置好的网站已经成功部署到github中了。</p><h2 id="如何对本地网站进行版本控制"><a href="#如何对本地网站进行版本控制" class="headerlink" title="如何对本地网站进行版本控制"></a>如何对本地网站进行版本控制</h2><p>进过如上步骤之后你的网站已经成功部署到github中了，但是如果对你的网站进行版本控制呢？</p><p>我是参考<a href="http://chitanda.me/2015/06/18/hexo-sync-in-multiple-pc/" target="_blank" rel="external">利用git解决hexo博客多PC间同步问题</a>这篇博客的做法：<br>利用oschina的私有仓库来进行版本控制，在网站工作根路径下将该目录重新初始化成本地git仓库，然后将本地仓库提交到oschina的私有仓库中。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hexo是一款快速、简洁且高效的博客框架，用它来搭建自己的个人博客是一个不错的选择。这篇文章主要介绍我是如何使用该框架来搭建自己的个人博客。&lt;/p&gt;
    
    </summary>
    
      <category term="博客" scheme="http://yoursite.com/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="blog" scheme="http://yoursite.com/tags/blog/"/>
    
  </entry>
  
</feed>
